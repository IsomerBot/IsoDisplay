services:
  postgres:
    image: postgres:15-alpine
    container_name: isodisplay-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-isodisplay}
      POSTGRES_USER: ${POSTGRES_USER:-isodisplay}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
    volumes:
      - ./data/postgres/db:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - isodisplay-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-isodisplay} -d ${POSTGRES_DB:-isodisplay}"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: isodisplay-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-isodisplay}:${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}@postgres:5432/${POSTGRES_DB:-isodisplay}?schema=public
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:?NEXTAUTH_SECRET is required}
      NODE_ENV: production
      FILE_STORAGE_PATH: /app/uploads
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@example.com}
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-change-me}
      YOUTUBE_API_KEY: ${YOUTUBE_API_KEY}
    volumes:
      - ./uploads:/app/uploads
    ports:
      - "3000:3000"
    networks:
      - isodisplay-network

networks:
  isodisplay-network:
    driver: bridge
